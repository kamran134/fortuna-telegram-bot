const { addGroupAdminToDatabase, getGroupsFromDataBase, editUserInDatabase, getUserChatFromDatabase } = require('../database');
const { Markup } = require('telegraf');

async function connectTo(msg, bot) {
    const messageText = msg.text.replace('@fortunaVolleybalBot', '');
    const chatId = messageText.replace('/connectto ', '');
    const adminChatId = msg.chat.id;
    const userId = msg.from.id;

    const groupInfo = await bot.getChat(chatId);
    const groupName = groupInfo ? groupInfo.title : 'noname';

    bot.getChatMember(chatId, userId).then(member => {
        if (member.status === 'administrator' || member.status === 'creator') {
            try {
                const result = addGroupAdminToDatabase({ chatId, adminChatId, groupName });

                if (!result) {
                    console.error('RESULT ERROR: ', result);
                    throw result;
                } else {
                    bot.sendMessage(adminChatId, `–ì—Ä—É–ø–ø–∞ ${groupName} —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–µ–∫—É—â–µ–π. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–≥—Ä—ã, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏–≥—Ä—ã –æ—Ç—Å—é–¥–∞!`);
                }
            } catch (error) {
                console.error(error);
                throw error;
            }
        } else {
            bot.sendMessage(adminChatId, '–î–µ–ª–æ –ø–∞—Ö–Ω–µ—Ç –∂–∞—Ä–µ–Ω—ã–º. –í—Ä—è–¥-–ª–∏ –≤—ã –∞–¥–º–∏–Ω —Ç–æ–π –≥—Ä—É–ø–ø—ã');
        }
    }).catch(err => {
        console.error('Checking for group admin error: ', err);
    });
}

async function showGroups(adminChatId, bot) {
    try {
        const groups = await getGroupsFromDataBase(adminChatId);

        if (!groups || !Array.isArray(groups)) {
            console.error('groups is not an array!', groups);
        } else if (groups.length === 0) {
            bot.sendMessage(adminChatId, `–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø`);
        } else {
            bot.sendMessage(adminChatId, `–ì—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∞–¥–º–∏–Ω–∏—Ç–µ: \n\n${groups.map(group => group.group_name).join('\n')}`);
        }
    } catch (error) {
        console.error('SHOW GROUP ERROR: ', error);
    }
}

async function showYourGroups(adminChatId, bot, command) {
    try {
        const groups = await getGroupsFromDataBase(adminChatId);

        if (!groups || !Array.isArray(groups)) {
            console.error('groups is not an array!', groups);
        } else if (groups.length === 0) bot.sendMessage(adminChatId, `–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø`);
        else {
            const groupsButtons = groups.map(group => ([{text: group.group_name, callback_data: `selectedGroupFor${command}_${group.chat_id}`}]));
            
            bot.sendMessage(adminChatId, `–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—á–∏–Ω—è–µ—Ç—Å—è –≤–∞–º`, {
                reply_markup: {
                    inline_keyboard: [...groupsButtons]
                }
                //reply_markup: inlineKeyboard
            });
        }
    } catch (error) {
        console.log('START GAME ERROR: ', error);
    }
}

async function editUser(msg, bot) {
    const chatId = msg.chat.id;
    const adminId = msg.from.id;
    const userOptionsString = msg.text.replace('/adminedituser ', '');
    const [userId, firstName, lastName, ...rest] = userOptionsString.split('/');
    const fullnameAz = rest[0] || null;

    try {
        const result = await getUserChatFromDatabase(userId);

        if (result) {

            userChatId = result.chat_id;
            
            const chatMember = await bot.getChatMember(userChatId, adminId);
            const isAdmin = chatMember.status === 'administrator' || chatMember.status === 'creator';

            console.log('\n\nisAdmin', isAdmin, '\n\n');

            if (isAdmin) {
                const user = await editUserInDatabase({ userId, firstName, lastName, fullnameAz });

                if (user) {
                    bot.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n` +
                    `ID: ${user.id}\n–ò–º—è: ${user.first_name}\n–§–∞–º–∏–ª–∏—è: ${user.last_name}\n–ù–∞ –∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–æ–º: ${user.fullname_az}`);
                } else {
                    bot.sendMessage(chatId, '–ï—Å–ª–∏ —á–µ—Å—Ç–Ω–æ, –º—ã –≤ —à–æ–∫–µ üò≥ –ü–æ–∫–∞ –≤—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–Ω –ø—Ä–æ–ø–∞–ª. ' +
                     '–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —á—Ç–æ-—Ç–æ –Ω–∞–ø—É—Ç–∞–ª–∏ —Å ID-—à–∫–æ–π.');
                }
            } else {
                bot.sendMessage(chatId, `–í—ã –Ω–µ –æ–¥–º—ç–Ω –≤ —Ç–æ–π –≥—Ä—É–ø–ø–µ. –ú–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç –∫–æ–º–∞–Ω–¥–∞ /agilliol ?`);
            }
        } else {
            bot.sendMessage(chatId, `–ö–∞–∂–µ—Ç—Å—è, –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ç–æ–π –≥—Ä—É–ø–ø–µ, –≥–¥–µ –≤—ã –∞–¥–º–∏–Ω!`);
        }
    } catch (error) {
        console.error('EDIT USER ERROR: ', error);
    }
}

module.exports = {
    connectTo,
    showGroups,
    showYourGroups,
    editUser
}