import moment from 'moment';
import { getGamesTimesFromDatabase, getRandomUserFromDatabase, addJokeToDataBase, deleteJokeFromDataBase, getJokesFromDataBase, updateJokeInDataBase } from '../database/index.js';

export async function agilliOl(chatId, bot) {
    try {
        const randomUser = await getRandomUserFromDatabase(chatId);

        if (randomUser) {
            bot.sendMessage(chatId, `@${randomUser.username ? randomUser.username :
                '<a href="tg://user?id=${user.user_id}">' + randomUser.first_name + '</a>'}, aƒüƒ±llƒ± ol! üß†`,
                {parse_mode: 'HTML'});
        } else {
            bot.sendMessage(chatId, '–ü–µ—á–∞–ª—å–Ω–æ, –∫–æ–≥–¥–∞ –Ω–µ–∫–æ–º—É –≥–æ–≤–æ—Ä–∏—Ç—å "Aƒüƒ±llƒ± ol" ü•≤');
        }
    } catch (error) {
        console.error('AGILLI OL ERROR: ', error);
    }
}

export async function whatTime(msg, bot) {
    const chatId = msg.chat.id;

    try {
        const gamesTimes = await getGamesTimesFromDatabase(chatId);

        if (gamesTimes && gamesTimes.length > 0) {
            const gamesTimesString = gamesTimes.map(game => `${game.label}: ${moment(game.game_starts, 'HH:mm:ss').format('HH:mm')}`).join(', ');
            bot.sendMessage(chatId, `–ú—ç—ç—ç—Ö. –°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å? üòí\n${gamesTimesString}`);
        }
    } catch (error) {
        console.error('WHAT TIME ERROR: ', error);
    }
}

export async function addJoke(msg, bot) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    if (checkCreatorId(userId)) {
        try {
            const parts = msg.text.replace('/adminaddjoke ', '').split('/');
            const [joke, jokeType = 0] = parts;
            await addJokeToDataBase(joke, jokeType);
            bot.sendMessage(chatId, `–í–∞—à–∞ –≥–µ–Ω–∏–∞–ª—å–Ω–∞—è "—à—É—Ç–∫–∞" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ª—é–±—É–π—Ç–µ—Å—å –Ω–∞ –Ω–µ—ë –µ—â—ë —Ä–∞–∑: ${joke}`);
            
        } catch (error) {
            bot.sendMessage(chatId, `–í–∞—à–∞ –≥–µ–Ω–∏–∞–ª—å–Ω–∞—è "—à—É—Ç–∫–∞" –Ω–µ –¥–æ–±–∞–≤–∏–ª–∞—Å—å. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º —Ç—É–ø–∞—è. –ê –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –≤–æ—Ç —Ç–∞–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
        }
    } else {
        bot.sendMessage(chatId, `–¢–∞–∫—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É, –∫–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É —à—É—Ç–∫–∞–º–∏ –º—ã –º–æ–≥–ª–∏ –¥–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å—Ç–∏–Ω–Ω—ã–º —é–º–æ—Ä–∏—Å—Ç–∞–º. –ü–æ—ç—Ç–æ–º—É –Ω–∏–∫—Ç–æ –∫—Ä–æ–º–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç —É–≤–ª–µ–∫–∞—Ç—å—Å—è —ç—Ç–∏–º!`);
    }
}

export async function deleteJoke(msg, bot) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (checkCreatorId(userId)) {
        const jokeId = +msg.text.replace('/admindeletejoke ', '');
        if (Number.isInteger(jokeId)) {
            try {
                await deleteJokeFromDataBase(jokeId);
                bot.sendMessage(chatId, '–í–∏–¥–∏–º–æ —à—É—Ç–∫–∞ –±—ã–ª–∞ –Ω–µ –æ—á–µ–Ω—å. –í—ã –µ—ë —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏!');
            } catch (error) {
                bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à—É—Ç–∫—É. –õ–∏–±–æ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –≥–µ–Ω–∏–∞–ª—å–Ω–∞, –ª–∏–±–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫–∞—è: ${error}`);
            }
        } else {
            bot.sendMessage(chatId, '–ß–µ–µ–µ–µ–ª, —É –Ω–∞—Å –≤ –±–∞–∑–µ id-—à–∫–∏ —ç—Ç–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, –∞ —Ç—ã –∫–∞–∫—É—é-—Ç–æ —Ö–µ—Ä–æ—Ç—É –Ω–∞–ø–∏—Å–∞–ª!');
        }
    } else {
        bot.sendMessage(chatId, `–ì–µ–Ω–∏–∞–ª—å–Ω—ã–µ —à—É—Ç–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–∞–∫–∏–µ –∂–µ –≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ —é–º–æ—Ä–∏—Å—Ç—ã, —Ç–æ –µ—Å—Ç—å —Å–∞–º–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–∏!`);
    }
}

export async function listJokes(msg, bot) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (checkCreatorId(userId)) {
        const jokeType = +msg.text.replace('/adminlistjokes ', '');
        if (Number.isInteger(jokeType)) {
            try {
                const result = await getJokesFromDataBase(jokeType);
                bot.sendMessage(chatId, result.map(joke => `id: ${joke.id} - —à—É—Ç–∫–∞: ${joke.joke} - –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${joke.type}`).join('\n'));
            } catch (error) {
                bot.sendMessage(chatId, `–®—É—Ç–∫–∏ –æ—Ç –Ω–∞—Å —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –∏–∑-–∑–∞ –≤–æ—Ç —ç—Ç–æ–π –æ—à–∏–±–∫–∏: ${error}`)
            }
        } else {
            bot.sendMessage(chatId, `–ù–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à—É—Ç–æ–∫ —ç—Ç–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞. –ê —Ç—ã –≤–≤—ë–ª —Ñ–∏–≥ –∑–Ω–∞–µ—Ç —á—Ç–æ!`);
        }
    } else {
        bot.sendMessage(chatId, '–¢–æ–ª—å–∫–æ –∏—Å—Ç–∏–Ω–Ω—ã–º —é–º–æ—Ä–∏—Å—Ç–∞–º —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—Å–µ—Ç–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞–π–Ω—ã–π –º–∏—Ä —à—É—Ç–æ–∫!');
    }
}

export async function editJoke(msg, bot) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (checkCreatorId(userId)) {
        const parts = msg.text.replace('/admineditjoke ', '').split('/');

        try {
            const [id, joke, jokeType = 0] = parts;
            if (Number.isInteger(+id) && Number.isInteger(+jokeType)) {
                await updateJokeInDataBase(id, joke, jokeType);
                bot.sendMessage(chatId, '–í–∏–¥–∏–º–æ —à—É—Ç–∫–∞ –±—ã–ª–∞ –Ω–µ –æ—á–µ–Ω—å. –í—ã –µ—ë —Å–¥–µ–ª–∞–ª–∏ –æ—á–µ–Ω—å!');
            } else {
                bot.sendMessage(chatId, '–õ–∏–±–æ id-—à–∫–∞, –ª–∏–±–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —à—É—Ç–æ–∫ –Ω–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ò—Å–ø—Ä–∞–≤—å!');
            }
        } catch (error) {
            bot.sendMessage(chatId, `–≠—Ç–∞ —à—É—Ç–∫–∞ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏–∑-–∑–∞ –≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –ª–∏–±–æ —É –≤–∞—Å –≤–æ—Ç —ç—Ç–∞ –æ—à–∏–±–∫–∞: ${error}`);
        }
    } else {
        bot.sendMessage(chatId, '–¢–æ–ª—å–∫–æ –∏—Å—Ç–∏–Ω–Ω—ã–µ —é–º–æ—Ä–∏—Å—Ç—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à—É—Ç–∫–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –ê –æ—Å—Ç–∞–ª—å–Ω—ã–º —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å —É –ª—É—á—à–∏—Ö!');
    }
}

export async function sayPrivate(msg, bot) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const parts = msg.text.split(' ');
    if (parts.length < 3) {
        bot.sendMessage(chatId, '‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sayprivate @username —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /sayprivate user_id —Å–æ–æ–±—â–µ–Ω–∏–µ');
        return;
    }

    const target = parts[1];
    const privateMsg = parts.slice(2).join(' ');

    let targetId = null;
    let displayName = target;

    if (target.startsWith('@')) {
        try {
            const targetUser = await bot.getChat(target);
            targetId = targetUser.user_id;
            displayName = `@${targetUser.username || targetUser.first_name}`;
        }
        catch (error) {
            console.error('Error fetching user by username:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º.');
            return;
        }
    } else if (!isNaN(target)) {
        targetId = parseInt(target, 10);
    }

    if (!targetId) {
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
    }

    const callbackData = 'showPrivate_' + userId + '_' + targetId + '_' + encodeURIComponent(privateMsg);
    console.log('Callback data:', callbackData);

    bot.sendMessage(chatId, `–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${displayName}`, {
        reply_to_message_id: msg.message_id,
        reply_markup: {
            inline_keyboard: [[
                { text: 'üîê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', callback_data: callbackData }
            ]]
        }
    });
}

async function checkCreatorId(userId) {
    return (userId === 963292126 || userId === 112254199);
}