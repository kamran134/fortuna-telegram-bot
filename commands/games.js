const moment = require('moment');
const { getUsersFromDatabase, addGameToDatabase, getGamesFromDatabase, changeGameLimitFromDataBase } = require('../database');
const { tagUsersByCommas } = require('./common');
const { Markup } = require('telegraf');
const { skloneniye, skloneniyeAzFull } = require('../common/skloneniye')

async function startGame(msg, bot) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —á–∞—Å—Ç–∏
    const parts = msg.text.replace('/startgame ', '').split('/');
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
    if (parts.length === 6) {

        const gameOptions = {
            date: parts[0],
            start: parts[1],
            end: parts[2],
            users_limit: parts[3],
            location: parts[4],
            label: parts[5]
        }

        let taggedUsers = '';

        const users = await getUsersFromDatabase(chatId);

        if (users && users.length > 0) {
            taggedUsers = tagUsersByCommas(users);

            try {
                const gameId = await addGameToDatabase(chatId, gameOptions);

                if (gameId && gameId > 0) {
                    bot.sendMessage(chatId, 
                        `üì¢ ${skloneniyeAzFull(gameOptions.label, '–¥–∞—Ç–µ–ª—å–Ω—ã–π')} oyun elan edildi!`
                        `üì¢ –û–±—ä—è–≤–ª–µ–Ω–∞ –∏–≥—Ä–∞ –Ω–∞ ${skloneniye(gameOptions.label, '–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π')}!\n` +
                        `üóì Tarix / –î–∞—Ç–∞: ${gameOptions.date}\n` +
                        `‚è≥ Vaxt / –í—Ä–µ–º—è: ${gameOptions.start} ‚Äî ${gameOptions.end}.\n` +
                        `üìç M…ôkan / –ú–µ—Å—Ç–æ: ${gameOptions.location}\n\n${taggedUsers}`, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {text: 'Oyuna yazƒ±lmaq / –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É', callback_data: `appointment_${gameId}`},
                                ],
                                [
                                    {text: 'D…ôqiq deyil / –ù–µ —Ç–æ—á–Ω–æ', callback_data: `notconfirmed_${gameId}`},
                                ],
                                [
                                    {text: 'ƒ∞mtina etm…ôk / –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã', callback_data: `decline_${gameId}`}
                                ]
                            ]
                        }
                    });

                    users.forEach(user => {
                        bot.sendMessage(user.user_id,
                            `üì¢ ${skloneniyeAzFull(gameOptions.label, '–¥–∞—Ç–µ–ª—å–Ω—ã–π')} oyun elan edildi!`
                            `üì¢ –û–±—ä—è–≤–ª–µ–Ω–∞ –∏–≥—Ä–∞ –Ω–∞ ${skloneniye(gameOptions.label, '–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π')}!\n` +
                            `üóì Tarix / –î–∞—Ç–∞: ${gameOptions.date}\n` +
                            `‚è≥ Vaxt / –í—Ä–µ–º—è: ${gameOptions.start} ‚Äî ${gameOptions.end}.\n` +
                            `üìç M…ôkan / –ú–µ—Å—Ç–æ: ${gameOptions.location}`, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {text: 'Oyuna yazƒ±lmaq / –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É', callback_data: `privateAppointment_${chatId}_${gameId}`},
                                    ],
                                    [
                                        {text: 'D…ôqiq deyil / –ù–µ —Ç–æ—á–Ω–æ', callback_data: `privateNotconfirmed_${chatId}_${gameId}`},
                                    ],
                                    [
                                        {text: 'ƒ∞mtina etm…ôk / –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã', callback_data: `privateDecline_${chatId}_${gameId}`}
                                    ]
                                ]
                            }
                        });
                    });
                } else {
                    bot.sendMessage(userId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –∏–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å. –ß–∏—Ç–∞–π –ª–æ–≥–∏!');
                }
            } catch(error) {
                console.error('ADDING GAME ERROR', error);
            }

        } else {
            bot.sendMessage(chatId, '–ö–∞–∂–µ—Ç—Å—è —É –Ω–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã :(');
            return;
        }
    } else {
        bot.sendMessage(chatId, '–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \`\/startgame –î–î.–ú–ú.–ì–ì–ì–ì\/–ß–ß:–ú–ú (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞)\/–ß–ß:–ú–ú (–≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞)\/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç' +
        '\/–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è\/–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã\`');
    }
}

function tagUsersForGame(users) {
    return users.map((user, index) => user.username ? `${(index + 1)}. @${user.username}` :
        `${(index + 1)}. <a href="tg://user?id=${user.user_id}">${user.first_name}</a>`).join('\n');
}

async function showGames(chatId, bot, isDelete = false) {
    let gameButtons = [];

    try {
        const games = await getGamesFromDatabase(chatId);

        if (games && games.length > 0) {
            if (isDelete) {
                gameButtons = games.map(game => [
                    {text: `${game.label}`, callback_data: `deletefromgame_${game.id}`}
                ]);
            }

            gameButtons = games.map(game => [
                {text: `+ –Ω–∞ ${skloneniye(game.label, '–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π')}`, callback_data: `appointment_${game.id}`},
                {text: `+/- –Ω–∞ ${skloneniye(game.label, '–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π')}`, callback_data: `notconfirmed_${game.id}`},
                {text: `- –Ω–∞ ${skloneniye(game.label, '–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π')}`, callback_data: `decline_${game.id}`}
            ]);

            const gamesString = games.map((game, index) =>
                `üèê Oyun ‚Ññ ${(index + 1)} / –ò–≥—Ä–∞ ‚Ññ${(index + 1)}\n` +
                `üóì Tarix / –î–∞—Ç–∞: ${moment(game.game_date).format('DD.MM.YYYY')} (${skloneniyeAzFull(game.label, '–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π')} / ${game.label})\n` +
                `‚è≥ Vaxt / –í—Ä–µ–º—è: ${moment(game.game_starts, 'HH:mm:ss').format('HH:mm')} ‚Äî ${moment(game.game_ends, 'HH:mm:ss').format('HH:mm')}\n` +
                `üìç M…ôkan / –ú–µ—Å—Ç–æ: ${game.place}`, {parse_mode: 'MarkdownV2'}
            ).join('\n----------------------------------\n');

            bot.sendMessage(chatId, gamesString, {
                reply_markup: {
                    inline_keyboard: [...gameButtons]
                }
            });
        } else {
            bot.sendMessage(chatId, 'H…ôl…ôki oyun-zad yoxdur / –ê –∏–≥—Ä –µ—â—ë –Ω–µ—Ç üòì');   
        }
    } catch (error) {
        console.error('SHOW GAME ERROR', error);
    }
}

async function deactiveGames(msg, bot) {
    const chatId = msg.chat.id;
    let gameDeactiveButtons = [];

    try {
        const games = await getGamesFromDatabase(chatId);

        if (games && games.length > 0) {
            const gamesString = games.map((game, index) =>
                `–ò–≥—Ä–∞ ‚Ññ${(index + 1)}\n` +
                `    –î–∞—Ç–∞: ${moment(game.game_date).format('DD.MM.YYYY')} (${game.label})\n`
            ).join('\n----------------------------------\n');

            gameDeactiveButtons = games.map(game => ({
                text: `–ó–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É –Ω–∞ ${skloneniye(game.label, '–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π')} (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)`,
                callback_data: `deactivegame_${game.id}`}));

            const inlineKeyboard = Markup.inlineKeyboard(gameDeactiveButtons);

            bot.sendMessage(chatId, gamesString, {
                reply_markup: {
                    inline_keyboard: [gameDeactiveButtons]
                }
            });
        } else {
            bot.sendMessage(chatId, '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –Ω–µ—Ç');
        }
    } catch (error) {
        console.error('DEACTIVE GAME ERROR', error);
    }
}

async function changeGameLimit(msg, bot) {
    const chatId = msg.chat.id;
    const parts = msg.text.replace('/changelimit ', '').split('/');
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
    if (parts.length === 2) {

        const limitOptions = {
            label: parts[0],
            limit: parts[1]
        }

        try {
            const label = await changeGameLimitFromDataBase(chatId, limitOptions);

            if (label) {
                bot.sendMessage(chatId, `–ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∏–≥—Ä—É –≤ ${skloneniye(label, '–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π')}!`);
            } else {
                bot.sendMessage(chatId, '–ö–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–æ–π –∏–≥—Ä—ã –±–æ–ª—å—à–µ –Ω–µ—Ç');
            }
        } catch (error) {
            console.error('LIMIT CHANGE ERROR', error);
        }
    } else {
        bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: \`\/changelimit [–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã]\/[–Ω–æ–≤—ã–π –ª–∏–º–∏—Ç]');
    }
}

module.exports = {
    startGame,
    showGames,
    deactiveGames,
    changeGameLimit
}